const db = require('better-sqlite3')('database.sqlite');
const { v4: uuidv4 } = require('uuid');

/**
 * Mod√®le pour les posts.
 * Impl√©mente les m√©thodes pour cr√©er, r√©cup√©rer, mettre √† jour et supprimer des posts.
 */
const Post = {
  /**
   * R√©cup√®re tous les posts publics tri√©s par date (du plus r√©cent au plus ancien)
   * @param {number} page - Num√©ro de page pour la pagination
   * @param {number} limit - Nombre de posts par page
   * @returns {Array} Posts r√©cup√©r√©s
   */
  getAllPublic: (page = 1, limit = 10) => {
    const offset = (page - 1) * limit;
    
    try {
      const stmt = db.prepare(`
        SELECT p.*, u.pseudo as authorName
        FROM posts p
        JOIN users u ON p.authorId = u.id
        WHERE p.visibility = 'public'
        ORDER BY p.createdAt DESC
        LIMIT ? OFFSET ?
      `);
      
      return stmt.all(limit, offset);
    } catch (error) {
      console.error('Error fetching posts:', error);
      throw new Error('Failed to fetch posts');
    }
  },
  
  /**
   * R√©cup√®re un post par son ID
   * @param {number} id - ID du post
   * @returns {Object} Post r√©cup√©r√©
   */
  getById: (id) => {
    try {
      const stmt = db.prepare(`
        SELECT p.*, u.pseudo as authorName
        FROM posts p
        JOIN users u ON p.authorId = u.id
        WHERE p.id = ?
      `);
      
      return stmt.get(id);
    } catch (error) {
      console.error(`Error fetching post ${id}:`, error);
      throw new Error('Failed to fetch post');
    }
  },
  
  /**
   * R√©cup√®re tous les posts d'un utilisateur
   * @param {number} userId - ID de l'utilisateur
   * @returns {Array} Posts de l'utilisateur
   */
  getByUser: (userId) => {
    try {
      const stmt = db.prepare(`
        SELECT p.*, u.pseudo as authorName
        FROM posts p
        JOIN users u ON p.authorId = u.id
        WHERE p.authorId = ?
        ORDER BY p.createdAt DESC
      `);
      
      return stmt.all(userId);
    } catch (error) {
      console.error(`Error fetching posts for user ${userId}:`, error);
      throw new Error('Failed to fetch user posts');
    }
  },
  
  /**
   * Cr√©e un nouveau post
   * @param {Object} postData - Donn√©es du post
   * @returns {Object|null} Le post cr√©√© ou null en cas d'√©chec
   */
  create: (postData) => {
    try {
      const { authorId, type, title, content, hashtags, visibility, ttsInstructions } = postData;
      
      console.log('üîç MODEL - Cr√©ation d\'un post avec les donn√©es:', JSON.stringify(postData, null, 2));
      
      // Validation des donn√©es
      if (!authorId || !type || !content) {
        console.error('üìõ MODEL - Donn√©es invalides pour la cr√©ation d\'un post:', { authorId, type, content });
        throw new Error('Missing required fields: authorId, type, content');
      }
      
      // Traitement du hashtag unique (plus de tableau/JSON)
      let singleHashtag = null;
      
      // Si hashtags existe dans les donn√©es, on prend juste le premier ou la cha√Æne directement
      if (hashtags) {
        if (Array.isArray(hashtags) && hashtags.length > 0) {
          // Prendre juste le premier hashtag du tableau
          singleHashtag = hashtags[0].toString();
        } else if (typeof hashtags === 'string') {
          // Prendre la cha√Æne directement
          singleHashtag = hashtags;
        } else {
          // Pour tout autre type, conversion en cha√Æne
          singleHashtag = String(hashtags);
        }
        
        // Ajouter # si n√©cessaire
        if (singleHashtag && !singleHashtag.startsWith('#')) {
          singleHashtag = '#' + singleHashtag;
        }
      }
      
      console.log('üîç MODEL - Hashtag unique:', singleHashtag);
      
      const now = new Date().toISOString();
      const stmt = db.prepare(`
        INSERT INTO posts (authorId, type, title, content, hashtags, ttsInstructions, visibility, createdAt, updatedAt)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
      `);
      
      // Ex√©cution de la requ√™te
      const result = stmt.run(
        authorId, 
        type, 
        title === undefined ? null : title, 
        content, 
        singleHashtag, // D√©sormais une simple cha√Æne
        ttsInstructions === undefined ? null : ttsInstructions, 
        visibility || 'public', 
        now, 
        now
      );
      
      console.log('üîç MODEL - R√©sultat de l\'insertion:', result);
      
      if (result.changes === 0) {
        console.error('üìõ MODEL - √âchec de l\'insertion du post');
        return null;
      }
      
      const newPost = db.prepare('SELECT * FROM posts WHERE id = ?').get(result.lastInsertRowid);
      console.log('üîç MODEL - Nouveau post cr√©√©:', JSON.stringify(newPost, null, 2));
      
      return newPost;
    } catch (error) {
      console.error('üìõ MODEL - Erreur lors de la cr√©ation du post:', error.message);
      console.error('üìõ MODEL - Stack trace:', error.stack);
      throw new Error(`Failed to create post: ${error.message}`);
    }
  },
  
  /**
   * Met √† jour un post existant
   * @param {number} id - ID du post √† mettre √† jour
   * @param {Object} postData - Nouvelles donn√©es du post
   * @returns {boolean} Succ√®s de l'op√©ration
   */
  update: (id, postData) => {
    try {
      const { title, content, hashtags, visibility, ttsInstructions } = postData;
      
      // Pr√©paration du hashtag unique (comme dans create)
      let singleHashtag = null;
      
      if (hashtags) {
        if (Array.isArray(hashtags) && hashtags.length > 0) {
          singleHashtag = hashtags[0].toString();
        } else if (typeof hashtags === 'string') {
          singleHashtag = hashtags;
        } else {
          singleHashtag = String(hashtags);
        }
        
        // Ajouter # si n√©cessaire
        if (singleHashtag && !singleHashtag.startsWith('#')) {
          singleHashtag = '#' + singleHashtag;
        }
      }
      
      console.log('üîç MODEL - Hashtag pour update:', singleHashtag);
      
      const stmt = db.prepare(`
        UPDATE posts
        SET title = ?, content = ?, hashtags = ?, visibility = ?, 
            ttsInstructions = ?, updatedAt = datetime('now')
        WHERE id = ?
      `);
      
      const result = stmt.run(
        title || null,
        content,
        singleHashtag, // Utiliser le hashtag comme cha√Æne simple
        visibility || 'public',
        ttsInstructions || null,
        id
      );
      
      return result.changes > 0;
    } catch (error) {
      console.error(`Error updating post ${id}:`, error);
      throw new Error('Failed to update post');
    }
  },
  
  /**
   * Supprime un post
   * @param {number} id - ID du post √† supprimer
   * @returns {boolean} Succ√®s de l'op√©ration
   */
  delete: (id) => {
    try {
      const stmt = db.prepare('DELETE FROM posts WHERE id = ?');
      const result = stmt.run(id);
      
      return result.changes > 0;
    } catch (error) {
      console.error(`Error deleting post ${id}:`, error);
      throw new Error('Failed to delete post');
    }
  },
  
  /**
   * Met √† jour l'√©tat de g√©n√©ration TTS d'un post
   * @param {number} id - ID du post
   * @param {string} audioUrl - URL de l'audio g√©n√©r√©
   * @returns {boolean} Succ√®s de l'op√©ration
   */
  updateTtsStatus: (id, audioUrl) => {
    try {
      const stmt = db.prepare(`
        UPDATE posts
        SET ttsAudioUrl = ?, ttsGenerated = true, updatedAt = datetime('now')
        WHERE id = ?
      `);
      
      const result = stmt.run(audioUrl, id);
      return result.changes > 0;
    } catch (error) {
      console.error(`Error updating TTS status for post ${id}:`, error);
      throw new Error('Failed to update TTS status');
    }
  },
  
  /**
   * Recherche de posts par mots cl√©s ou hashtags
   * @param {string} query - Terme de recherche
   * @param {number} limit - Limite de r√©sultats
   * @returns {Array} Posts correspondants √† la recherche
   */
  search: (query, limit = 20) => {
    try {
      // Cette impl√©mentation simplifi√©e recherche dans le contenu, titre et hashtags
      const stmt = db.prepare(`
        SELECT p.*, u.pseudo as authorName
        FROM posts p
        JOIN users u ON p.authorId = u.id
        WHERE (
          p.content LIKE ? OR 
          p.title LIKE ? OR
          p.hashtags LIKE ?
        )
        AND p.visibility = 'public'
        ORDER BY p.createdAt DESC
        LIMIT ?
      `);
      
      const searchPattern = `%${query}%`;
      return stmt.all(searchPattern, searchPattern, searchPattern, limit);
    } catch (error) {
      console.error(`Error searching posts with query "${query}":`, error);
      throw new Error('Failed to search posts');
    }
  }
};

module.exports = Post; 